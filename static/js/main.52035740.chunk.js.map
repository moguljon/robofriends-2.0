{"version":3,"sources":["components/Card.js","Robots.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","className","alt","src","Robots","CardList","robots","map","user","i","key","Searchbox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAgBeA,EAXF,SAAC,GAAqC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,MACnC,OACE,yBAAKC,UAAU,kDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,cACrB,4BAAKC,GACL,2BAAIC,GACJ,2BAAIC,KCPGI,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,gBACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,gBACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,EACJC,KAAM,YACNC,SAAU,KACVC,MAAO,oBAET,CACEH,GAAI,GACJC,KAAM,eACNC,SAAU,KACVC,MAAO,qBC/CIK,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,GAAIO,EAAOK,GAAGZ,GAAIC,KAAMM,EAAOK,GAAGX,KAAMC,SAAUK,EAAOK,GAAGV,SAAUC,MAAOI,EAAOK,GAAGT,aCAvGW,EAPG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,6BACC,2BAAOZ,UAAU,8CAA8Ca,KAAK,SAASC,YAAY,qBAAqBC,SAAUH,MCK9GI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCoCEC,E,kDAnCb,aAAe,IAAD,8BACZ,gBAaFC,eAAgB,SAACC,GACf,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJH,E,gEAQO,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAO9B,IAAD,EACyBC,KAAKN,MAA7BxB,EADD,EACCA,OAAQM,EADT,EACSA,YACVyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAMzC,KAAK0C,oBAAoBC,SAAS7B,EAAY4B,wBAE3D,OACE,yBAAKvC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWY,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAS+B,U,GA7BbK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDsH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.52035740.chunk.js","sourcesContent":["//react is need as an import to use jsx which is \r\n//html like syntax that serves at styling for our app(s)\r\nimport React from 'react';\r\n\r\n\r\nconst Card = ( { id, name, username, email } ) => {\r\n  return (\r\n    <div className='tc bg-light-pink dib br3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <h2>{name}</h2>\r\n      <p>{username}</p>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","\r\n//can have multiple exports when is not \r\n//default exports\r\n//destructuring it is needed\r\nexport const Robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'LG',\r\n    email: 'lg@business.corp'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Leslie Jay',\r\n    username: 'LJ',\r\n    email: 'lJ@business.corp'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Kim Porter',\r\n    username: 'KP',\r\n    email: 'KP@business.corp'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Jonathan Aguilar',\r\n    username: 'JA',\r\n    email: 'JA@business.corp'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Leanne Graham',\r\n    username: 'LG',\r\n    email: 'lg@business.corp'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Lisa James',\r\n    username: 'LJ',\r\n    email: 'LJ@business.corp'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Paul Henry',\r\n    username: 'PH',\r\n    email: 'PH@business.corp'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Holly Holm',\r\n    username: 'HH',\r\n    email: 'HH@business.corp'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Jon Jones',\r\n    username: 'JJ',\r\n    email: 'JJ@business.corp'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'React Native',\r\n    username: 'RN',\r\n    email: 'RN@business.corp'\r\n  }\r\n]","import React from 'react';\r\nimport Card from '../components/Card';\r\nimport { Robots } from '../Robots';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return <Card key={i} id={Robots[i].id} name={Robots[i].name} username={Robots[i].username} email={Robots[i].email}/> \r\n       })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchchange}) => {\r\n  return (\r\n    <div>\r\n     <input className='bg-light-pink dib br3 ma2 grow bw2 shadow-5' type='search' placeholder='enter robot friend' onChange={searchchange}/>\r\n    </div>\r\n  )\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList'\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots: users}));\r\n  }\r\n\r\n  onSearchChange= (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n    })\r\n      return (\r\n        <div className='tc'>\r\n          <h1>ROBOFRIENDS</h1>\r\n          <Searchbox searchchange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots= {filteredRobots}/>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//{ Robots } and if it was another one\n// { Robots, Cat }\n// import CardList from './CardList';\nimport App from './container/App';\n// import { Robots } from './Robots';\n\n//possibly work offline to make app faster\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}